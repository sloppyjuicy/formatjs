diff --git a/lib/parser.js b/lib/parser.js
index 63be53159041bbb3f3335aab47fc9a2c8ce7c406..86254cfca668bc5caeb6f463e65b068f94fab6ab 100644
--- a/lib/parser.js
+++ b/lib/parser.js
@@ -15,7 +15,10 @@ class Parser {
       return 'n == 1 && v0';
     }
 
-    return cond.replace(/([^=\s])([!=%]+)([^=\s])/g, '$1 $2 $3').replace(/([tv]) (!?)= 0/g, (m, sym, noteq) => {
+    return cond.replace(/([^=\s])([!=%]+)([^=\s])/g, '$1 $2 $3').replace(/[ce]\s?=\s?(\d+)/g, (m, c) => {
+      this.c = c;
+      return m;
+    }).replace(/([tv]) (!?)= 0/g, (m, sym, noteq) => {
       const sn = sym + '0';
       this[sn] = 1;
       return noteq ? '!' + sn : sn;
@@ -67,7 +70,12 @@ class Parser {
     }
 
     if (!vars.length) return '';
-    return 'var ' + ["s = String(n).split('.')", ...vars].join(', ');
+    if (this.c) {
+      vars.unshift('_n = String(n)', 'se = _n.split(/[ce]/)', 'e = se[1] || 0', 'c = e', 's = String(e ? Number(se[0]) * Math.pow(10, e) : _n).split(".")');
+    } else {
+      vars.unshift("s = String(n).split('.')");
+    }
+    return 'var ' + vars.join(', ');
   }
 
 }
diff --git a/lib/tests.js b/lib/tests.js
index 967ffb2d6ed1f5703c5b898561dca50f99fc1351..8c7abfdb5e2681c236b2b51ca0a5e0c099b722a9 100644
--- a/lib/tests.js
+++ b/lib/tests.js
@@ -19,10 +19,11 @@ class Tests {
     };
   }
 
-  error(n, type, msg) {
+  error(n, type, msg, fn) {
     const lc = JSON.stringify(this.lc);
     const val = JSON.stringify(n);
-    return new Error(`Locale ${lc} ${type} rule self-test failed for ${val} (${msg})`);
+    return new Error(`Locale ${lc} ${type} rule self-test failed for ${val} (${msg}). Function: 
+    ${fn}`);
   }
 
   testCond(n, type, expResult, fn) {
@@ -30,13 +31,13 @@ class Tests {
       var r = fn(n, type === 'ordinal');
     } catch (error) {
       /* istanbul ignore next: should not happen unless CLDR data is broken */
-      throw this.error(n, type, error);
+      throw this.error(n, type, error, fn.toString());
     }
 
     if (r !== expResult) {
       const res = JSON.stringify(r);
       const exp = JSON.stringify(expResult);
-      throw this.error(n, type, `was ${res}, expected ${exp}`);
+      throw this.error(n, type, `was ${res}, expected ${exp}`, fn.toString());
     }
 
     return true;
@@ -51,7 +52,7 @@ class Tests {
 
     data.values.forEach(n => {
       this.testCond(n, type, cat, fn);
-      if (!/\.0+$/.test(n)) this.testCond(Number(n), type, cat, fn);
+      if (!/\.0+$/.test(n)) this.testCond(n, type, cat, fn);
     });
     return true;
   }